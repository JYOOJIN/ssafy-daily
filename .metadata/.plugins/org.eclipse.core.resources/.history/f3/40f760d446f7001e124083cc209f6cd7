package daily_0410;

import java.io.*;
import java.util.*;

public class BJ_17135_캐슬디펜스 {
	
	static class Point implements Comparable<Point>{
		int x,y,dis;
		boolean isLive;
		
		public Point(int x, int y, int dis, boolean isLive) {
			super();
			this.x = x;
			this.y = y;
			this.dis = dis;
			this.isLive = isLive;
		}

		@Override
		public int compareTo(Point o) {
			if(this.dis==o.dis) {
				return this.y-o.y; //거리 같으면 가장 왼쪽에 있는 적을 공격
				
			}else {
				return this.dis-o.dis; //거리 오름차순
			}
		}
		
		
	}
	
	static int n,m,d;
	static int[] arr; //궁수 조합 index 들어갈 배열
	static int[][] map;
	static PriorityQueue<Point> pq;

	public static void main(String[] args) throws Exception{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st=new StringTokenizer(br.readLine());
		
		n=Integer.parseInt(st.nextToken());
		m=Integer.parseInt(st.nextToken());
		d=Integer.parseInt(st.nextToken());
		
		map=new int[n+1][m];
		arr=new int[3];
		pq=new PriorityQueue<>();
		
		for(int i=0;i<n;i++) {
			st=new StringTokenizer(br.readLine());
			for(int j=0;j<m;j++) {
				map[i][j]=Integer.parseInt(st.nextToken());
				if(map[i][j]==1) pq.add(new Point(i,j,0,true)); //초기 dis는 0
			}
		}
		
		
		while(!pq.isEmpty()) {
			
			
			
		}
	
		
	}
	
	public static void attack() {
		
		for(int i=0;i<3;i++) {
			int startx=n;
			int starty=arr[i];
			
			//적마다 거리 계산
			while(!pq.isEmpty()) {
				Point tmp=pq.poll(); //적
				int dis=Math.abs(startx-tmp.x)+Math.abs(starty-tmp.y);
				pq.add(new Point(tmp.x,tmp.y,dis,true));	
			}
			
			//현재 pq의 가장 앞에 거리 가장 가까운 적이 들어있음
			Point tmp=pq.poll(); //제거할 적 정한다
			tmp.isLive=false; //죽인다
			pq.add(tmp); //다시 넣는다 -> 같은 적 여러번 공격할수도 있음
		}
		
		//현재 pq에는 죽일 애들이 있음
		while(!pq.isEmpty()) {
			Point tmp=pq.poll();
			if(!tmp.isLive) continue;
			pq.add(tmp);
		}
		
		//pq 에서 적 제거완료
		
		//이동시작
		
		
	}
	
	public static void combination(int depth,int start) {
		
		if(depth==3) {
			//arr에 궁수의 위치 들어있음
			attack();
			
			
			
			return;
		}
		
		for(int i=start;i<m;i++) {
			arr[depth]=i;
			combination(depth+1, i+1);
		}
		
		
	}

}
