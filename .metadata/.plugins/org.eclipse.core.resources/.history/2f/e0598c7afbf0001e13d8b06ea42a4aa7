package daily_0402;

import java.io.*;
import java.util.*;

public class SW_4193_수영대회결승전 {

	
	public static class Node implements Comparable<Node>{
		int x,y,time;

		public Node(int x, int y, int time) {
			super();
			this.x = x;
			this.y = y;
			this.time = time;
		}

		@Override
		public int compareTo(Node o) {
			return this.time-o.time; //오름차순
		}
		
	}
	
	public static int n;
	public static int[][] map;
	public static boolean[][] visited;
	public static int[][] dir= {{-1,0},{0,1},{1,0},{0,-1}};
	public static Node start,end;

	public static void main(String[] args) throws IOException{
		
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int tc=Integer.parseInt(br.readLine());
		
		for(int t=1;t<=tc;t++) {
			
			n=Integer.parseInt(br.readLine());
			map=new int[n][n];
			visited=new boolean[n][n];
			for(int i=0;i<n;i++) {
				st=new StringTokenizer(br.readLine());
				for(int j=0;j<n;j++) {
					map[i][j]=Integer.parseInt(st.nextToken());
				}
			}
			
			st=new StringTokenizer(br.readLine());
			start=new Node(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()),0);
			
			st=new StringTokenizer(br.readLine());
			end=new Node(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()),0);
			
			int time=bfs();
			System.out.println("#"+t+" "+time);
			
		}

	}
	
	public static int bfs() {
		
		PriorityQueue<Node> pq=new PriorityQueue<>(); //class를 만드는 이유가 pq를 하기 위해서
		
		//pq에 넣고 + 방문 확인
		pq.add(start);
		visited[start.x][start.y]=true;
		while(!pq.isEmpty()) {
			Node tmp=pq.poll();
			
			if(tmp.x==end.x && tmp.y==end.y) {
				return tmp.time;
			}
			
			for(int d=0;d<4;d++) {
				int dx=tmp.x+dir[d][0];
				int dy=tmp.y+dir[d][1];
								
				//배열 범위 벗어나거나, 방문했거나, 벽이라면 pass
				if(dx<0 || dx>=n || dy<0 || dy>=n || map[dx][dy]==1 || visited[dx][dy]) continue;
				
				
				System.out.println(dx+","+dy);
				
				if(map[dx][dy]==0) { //이동가능한 길
					System.out.println("0으로이동"+dx+","+dy);
					pq.offer(new Node(dx,dy,tmp.time+1));
					visited[dx][dy]=true;
					
				}else if(map[dx][dy]==2) { //소용돌이가 있다면
					System.out.println("2으로이동"+dx+","+dy);
					pq.offer(new Node(dx,dy,tmp.time+3));
					visited[dx][dy]=true;
				}		
				
			}
		}
		
		return -1;

	}
	


}
