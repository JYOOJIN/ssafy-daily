package daily_0329;

import java.io.*;
import java.util.*;

public class SW_5656_벽돌깨기 {
	
	public static int[][] dir= {{-1,0},{0,1},{1,0},{0,-1}}; //위쪽 오른쪽 아래쪽 왼쪽
	public static int n,w,h;
	public static int[][] map;

	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		int tc=Integer.parseInt(br.readLine());
		for(int t=1;t<=tc;t++) {
			st=new StringTokenizer(br.readLine());
			n=Integer.parseInt(st.nextToken());
			w=Integer.parseInt(st.nextToken());
			h=Integer.parseInt(st.nextToken());
			
			map=new int[h][w];
			
			for(int i=0;i<h;i++) {
				st=new StringTokenizer(br.readLine());
				for(int j=0;j<w;j++) {
					map[i][j]=Integer.parseInt(st.nextToken());
				}
			}


			crash(1,2);
			crash(2,2);
			
			for(int i=0;i<h;i++) {
				for(int j=0;j<w;j++) {
					System.out.print(map[i][j]);
				}
				System.out.println();
			}
			
			
			
		}
		
		
	}
	
	//(x,y)에 구슬 떨어트린 후의 결과
	public static void crash(int x,int y) {
		
		Queue<int[]> q=new ArrayDeque<>();
		
		q.add(new int[] {x,y});
		
		while(!q.isEmpty()) {
			
			int[] tmp=q.poll();
			int val=map[tmp[0]][tmp[1]];
			map[tmp[0]][tmp[1]]=0;
			
			for(int d=0;d<4;d++) {
				int dx=tmp[0];
				int dy=tmp[1];
				for(int k=1;k<val;k++) {
					dx+=dir[d][0];
					dy+=dir[d][1];
					if(dx<0 || dx>=h || dy<0 || dy>=w) continue;
					if(map[dx][dy]>0) {
						q.add(new int[] {dx,dy});
					}
					
				}
			}
		}
		
		fall();

	}
	
	//빈 공간이 있을 경우 벽돌은 밑으로 떨어진다
	public static void fall() {
		
		int[][] copy=new int[h][w];
		for(int j=0;j<w;j++) {
			List<Integer> list=new ArrayList<>();
			for(int i=h-1;i>=0;i--) {
	
			}
			
			
		}
		
		for(int i=0;i<h;i++) {
			for(int j=0;j<w;j++) {
				map[i][j]=copy[i][j];
			}
		}
		
		
		
	}

}
