package daily_0327;

import java.io.*;
import java.util.*;

/**
 * @author 정유진
 * 문제: SW_3289_서로소집합
 * 난이도: D3
 * 수행결과: Pass
 * 메모리: 32696 KB
 * 시간: 143 ms
 * 코드길이: 964 B
 * 풀이 전략: 최장 증가 부분 수열 - DP로 풀기
 * 			현재 i 번째의 최장 증가 수열 길이를 구한다 한다.
 * 			i번째 앞의 index 들을 j라고 한다.
 * 			
 * 			arr[i]>arr[j] 일때(증가 부분 수열의 일부가 될 수 있다면)
 * 			SIL[i]=Math.max(SIL[i], SIL[j]+1);
 * 
 * 			그 후 SIL에서 최댓값을 구하면 그것이 해당 수열의 최장 증가 부분 수열의 길이
 * 
 */

public class SW_3307_최장증가부분수열 {

	public static void main(String[] args) throws IOException{
		BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		int tc=Integer.parseInt(br.readLine());
		for(int t=1;t<=tc;t++) {
			int n=Integer.parseInt(br.readLine());
			
			int[] arr=new int[n]; //주어진 순열 담을 배열
			int[] sil=new int[n]; //최장 증가 부분 수열 길이 담을 배열
			
			
			st=new StringTokenizer(br.readLine());
			for(int i=0;i<n;i++) {
				arr[i]=Integer.parseInt(st.nextToken());
			}
			
			int max=LIS_DP(arr,sil,n);
			
			System.out.println("#"+t+" "+max);
			
		}
	}
	
	public static int LIS_DP(int[] arr,int[] sil,int n) {
		
		for(int i=0;i<n;i++) {
			sil[i]=1; 
			for(int j=0;j<i;j++) {
				if(arr[i]>arr[j]) {
					sil[i]=Math.max(1+sil[j], sil[i]);
				}
			}

		}
		
		int max=0;
		for(int i=0;i<n;i++) {
			if(sil[i]>max) max=sil[i];
		}
		
		return max;
	}
}
